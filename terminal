# 进入项目根目录
cd C:\Users\khoo_\Desktop\Cursor_ANY-GO

# 清理并重建目录
Remove-Item -Recurse -Force cross-border-ecommerce -ErrorAction SilentlyContinue
mkdir cross-border-ecommerce
cd cross-border-ecommerce

# 创建并设置服务器
mkdir server
cd server

# 创建 server/index.js
@"
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/cross-border-ecommerce';

const app = express();
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));

mongoose.connect(MONGODB_URI)
  .then(() => console.log('数据库连接成功'))
  .catch(err => console.log('数据库连接错误:', err));

app.get('/', (req, res) => {
  res.json({ message: 'API 运行正常' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`服务器运行在端口 ${PORT}`);
});
"@ | Out-File -Encoding utf8 index.js

# 创建 server/package.json
@"
{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "express": "^4.21.2",
    "cors": "^2.8.5",
    "mongoose": "^7.8.6",
    "dotenv": "^16.4.7"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
"@ | Out-File -Encoding utf8 package.json

# 创建 server/.env
@"
MONGODB_URI=mongodb://localhost:27017/cross-border-ecommerce
PORT=5000
"@ | Out-File -Encoding utf8 -NoNewline .env

# 安装服务器依赖
npm install

# 创建并设置客户端
cd ..
mkdir client
cd client

# 清理旧文件
Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue
Remove-Item -Force package-lock.json -ErrorAction SilentlyContinue
Remove-Item -Recurse -Force src -ErrorAction SilentlyContinue

# 创建 src 目录结构
New-Item -ItemType Directory -Force -Path src/components/common
New-Item -ItemType Directory -Force -Path src/components/forms
New-Item -ItemType Directory -Force -Path src/pages
New-Item -ItemType Directory -Force -Path src/utils
New-Item -ItemType Directory -Force -Path src/types
New-Item -ItemType Directory -Force -Path src/hooks
New-Item -ItemType Directory -Force -Path src/services
New-Item -ItemType Directory -Force -Path src/assets

# 创建 TypeScript 配置文件
@"
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src"
  },
  "include": ["src"]
}
"@ | Out-File -Encoding utf8 tsconfig.json

# 创建全局类型声明文件
@"
/// <reference types="react-scripts" />

declare module '*.css';
declare module '*.less';
declare module '*.png';
declare module '*.svg' {
  export function ReactComponent(props: React.SVGProps<SVGSVGElement>): React.ReactElement;
  const url: string;
  export default url;
}
"@ | Out-File -Encoding utf8 src/types/global.d.ts

# 创建基础组件文件
@"
import React from 'react';
import { Layout } from 'antd';
import 'antd/dist/antd.css';

const { Header, Content } = Layout;

const App = () => {
  return (
    <Layout>
      <Header style={{ color: 'white' }}>跨境电商管理系统</Header>
      <Content style={{ padding: '20px' }}>
        <h1>欢迎使用</h1>
      </Content>
    </Layout>
  );
};

export default App;
"@ | Out-File -Encoding utf8NoBOM src/App.tsx

@"
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
"@ | Out-File -Encoding utf8NoBOM src/index.tsx

@"
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
"@ | Out-File -Encoding utf8NoBOM src/index.css

# 安装依赖
npm install --legacy-peer-deps

# 安装 react-router-dom 类型声明
npm install @types/react-router-dom

# 启动开发服务器
npm start

# 创建必要的源代码目录
mkdir src
cd src

# 创建基础文件
mkdir components
mkdir pages
mkdir utils
mkdir types
mkdir hooks
mkdir services

# 创建基础组件目录
cd components
mkdir common
mkdir forms
cd ..

# 回到项目根目录
cd ..

Write-Host "目录结构创建完成！"
Write-Host "请运行 'npm start' 启动项目"

# 创建 README.md
@"
# 跨境电商管理系统

一个现代化的跨境电商管理系统，基于 React + Node.js + MongoDB 技术栈，提供商品管理、库存管理、订单处理和数据分析等核心功能。

![项目截图](./docs/images/screenshot.png)

## ✨ 功能特性

- 📦 商品管理：CRUD、批量导入导出、图片上传、分类管理
- 📊 库存管理：实时监控、库存预警、出入库记录、库存报表
- 📋 订单管理：订单处理、状态追踪、批量处理、物流集成
- 📈 数据分析：销售趋势、商品排名、利润分析、自定义报表                                                                                                                                         

## 🚀 快速开始

### 环境要求

- Node.js >= 18
- MongoDB >= 5.0
- npm >= 9.0

### 安装步骤

1. 克隆项目
\`\`\`bash
git clone https://github.com/yourusername/cross-border-ecommerce.git
cd cross-border-ecommerce
\`\`\`

2. 安装依赖
\`\`\`bash
# 安装后端依赖
cd server
npm install

# 安装前端依赖
cd ../client
npm install --force
\`\`\`

3. 启动服务
\`\`\`bash
# 启动后端服务
cd server
npm run dev

# 新开终端，启动前端服务
cd client
npm start
\`\`\`

访问 http://localhost:3000 即可看到应用界面

## 🏗️ 技术栈

### 前端
- React 19 + TypeScript
- Ant Design 5.0
- Axios + React Router Dom

### 后端
- Node.js + Express
- MongoDB + Mongoose
- JWT + Multer

## 📖 文档

详细文档请查看 [PROJECT_SPEC.md](./PROJECT_SPEC.md)

## 🤝 贡献指南

1. Fork 项目
2. 创建特性分支 (\`git checkout -b feature/AmazingFeature\`)
3. 提交更改 (\`git commit -m 'Add some AmazingFeature'\`)
4. 推送到分支 (\`git push origin feature/AmazingFeature\`)
5. 创建 Pull Request

## 📄 许可证

[MIT License](./LICENSE)

## 👥 维护者

- 作者：[Your Name]
- 邮箱：[Your Email]
- GitHub：[Your GitHub]

---

如果这个项目对你有帮助，欢迎 star ⭐️
"@ | Out-File -Encoding utf8 README.md

# 创建完整的项目规范文档
@"
# 跨境电商管理系统 - 技术规范文档

## 项目概述

一个基于 React + Node.js + MongoDB 的现代化跨境电商管理系统，提供商品管理、库存管理、订单处理和数据分析等核心功能。

## 技术栈详情

### 前端技术
- React 19 + TypeScript
- Ant Design 5.0 UI组件库
- Axios 请求处理
- React Router Dom 路由管理
- 状态管理：Context + Hooks
- ESLint + Prettier 代码规范

### 后端技术
- Node.js + Express
- MongoDB + Mongoose
- JWT 身份认证
- RESTful API 设计
- 错误处理中间件
- 文件上传处理

## API 规范

### 请求格式
\`\`\`typescript
interface ApiRequest<T> {
  data: T;
  meta?: {
    page?: number;
    pageSize?: number;
    sort?: string;
    filter?: object;
  };
}
\`\`\`

### 响应格式
\`\`\`typescript
interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  code?: number;
}

interface PaginatedResponse<T> {
  list: T[];
  total: number;
  page: number;
  pageSize: number;
}
\`\`\`

## 项目结构

\`\`\`
cross-border-ecommerce/
├── client/                     # 前端项目
│   ├── public/                # 静态资源
│   └── src/
│       ├── components/        # 通用组件
│       │   ├── common/       # 公共组件
│       │   └── forms/        # 表单组件
│       ├── pages/            # 页面组件
│       ├── services/         # API 服务
│       ├── utils/            # 工具函数
│       ├── hooks/            # 自定义 Hooks
│       └── types/            # 类型定义
├── server/                    # 后端项目
│   ├── controllers/          # 控制器
│   ├── models/              # 数据模型
│   ├── routes/              # 路由
│   └── utils/               # 工具函数
└── docs/                     # 文档
\`\`\`

## 前端规范

### 类型定义
\`\`\`typescript
// API 响应类型
interface ApiResponse<T = any> {
  success: boolean;
  data: T;
  message?: string;
  code?: number;
}

// 分页参数
interface PaginationParams {
  page: number;
  pageSize: number;
}

// 查询参数
interface QueryParams extends Partial<PaginationParams> {
  sortField?: string;
  sortOrder?: 'ascend' | 'descend';
  [key: string]: any;
}
\`\`\`

### 错误处理
\`\`\`typescript
export class AppError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'AppError';
  }
}

export const handleError = (error: AxiosError | AppError) => {
  if (error instanceof AppError) {
    message.error(error.message);
    return;
  }
  // 处理其他错误...
};
\`\`\`

### 请求封装
\`\`\`typescript
const request = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',
  timeout: 10000,
});

request.interceptors.response.use(
  response => response.data,
  error => {
    handleError(error);
    return Promise.reject(error);
  }
);
\`\`\`

## 环境配置

### 开发环境
\`\`\`
REACT_APP_API_URL=http://localhost:5000
MONGODB_URI=mongodb://localhost:27017/cross-border-ecommerce
PORT=5000
\`\`\`

### 生产环境
\`\`\`
REACT_APP_API_URL=https://api.example.com
MONGODB_URI=mongodb://production-db/cross-border-ecommerce
PORT=80
\`\`\`

## 代码规范

### 命名规范
- 组件文件：PascalCase (如 ProductList.tsx)
- 工具文件：camelCase (如 errorHandler.ts)
- 样式文件：kebab-case (如 product-list.css)
- 常量：UPPER_CASE (如 API_BASE_URL)

### 组件规范
- 使用函数组件和 Hooks
- 遵循单一职责原则
- 组件文件不超过 300 行
- 提取可复用逻辑到自定义 Hooks

### Git 提交规范
\`\`\`
feat: 新功能
fix: 修复
docs: 文档
style: 格式
refactor: 重构
test: 测试
chore: 构建
\`\`\`

## 安全措施

- JWT 身份验证
- 请求参数验证
- XSS/CSRF 防护
- 文件上传限制
- 错误信息处理
- 敏感信息加密

## 性能优化

### 前端优化
- 路由懒加载
- 组件按需加载
- 大文件分片上传
- 列表虚拟滚动
- 图片懒加载

### 后端优化
- 数据库索引
- 请求缓存
- 并发控制
- 文件压缩
- 日志分级

## 部署流程

1. 前端构建
\`\`\`bash
cd client
npm run build
\`\`\`

2. 后端部署
\`\`\`bash
cd server
pm2 start ecosystem.config.js
\`\`\`

3. Nginx 配置
\`\`\`nginx
server {
    listen 80;
    server_name example.com;
    
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
    }
    
    location /api {
        proxy_pass http://localhost:5000;
    }
}
\`\`\`

## 测试规范

- 单元测试覆盖率 > 80%
- 提交前运行所有测试
- 编写测试用例文档
- 模拟网络请求
- 测试错误处理

## 文档维护

- 及时更新 API 文档
- 编写组件使用说明
- 记录重要决策
- 更新部署文档
- 维护更新日志

## 版本控制

- 遵循语义化版本
- 使用 Git Flow 工作流
- 保护主分支
- 代码审查
- 自动化测试

## 监控告警

- 性能监控
- 错误追踪
- 服务器监控
- 数据库监控
- 自动告警

## 维护者

- 作者：[Your Name]
- 邮箱：[Your Email]
- GitHub：[Your GitHub]

## 许可证

MIT License
"@ | Out-File -Encoding utf8 PROJECT_SPEC.md

# 确保在客户端目录
cd client

# 创建开发脚本
$scriptContent = @'
# 开发环境配置
$ErrorActionPreference = 'Stop'
$env:NODE_OPTIONS = '--openssl-legacy-provider'
$env:REACT_APP_API_URL = 'http://localhost:5000'

function Write-Step([string]$message) {
    Write-Host "`n==> $message" -ForegroundColor Cyan
}

function Test-Dependencies {
    # 检查 node_modules 是否存在
    if (-not (Test-Path "node_modules")) {
        return $false
    }

    # 检查 package.json 是否有更新
    $packageJsonHash = Get-FileHash "package.json" -Algorithm MD5
    $hashFile = ".package.json.hash"
    if (Test-Path $hashFile) {
        $oldHash = Get-Content $hashFile
        if ($oldHash -ne $packageJsonHash.Hash) {
            return $false
        }
    } else {
        return $false
    }

    return $true
}

function Start-Development {
    try {
        Write-Step "检查项目状态..."
        
        # 只在必要时安装依赖
        if (-not (Test-Dependencies)) {
            Write-Step "安装依赖..."
            npm install --legacy-peer-deps
            
            # 保存新的 package.json hash
            $packageJsonHash = Get-FileHash "package.json" -Algorithm MD5
            $packageJsonHash.Hash | Out-File -Encoding utf8 ".package.json.hash"
        } else {
            Write-Host "依赖已是最新，跳过安装" -ForegroundColor Green
        }

        Write-Step "启动开发服务器..."
        npm start
    } catch {
        Write-Host "`n❌ 错误: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "堆栈跟踪: $($_.ScriptStackTrace)" -ForegroundColor DarkGray
        exit 1
    }
}

# 运行开发环境
Start-Development
'@

# 直接在当前会话中执行脚本内容
Invoke-Expression $scriptContent
